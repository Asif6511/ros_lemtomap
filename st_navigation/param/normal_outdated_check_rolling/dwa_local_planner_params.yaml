# dwa local planner params optimized for using move_base with regular gmapping

#see http://ros.org/wiki/dwa_local_planner for param description
DWAPlannerROS:
  max_vel_x: 0.5 #default 0.55; for real-life 0.3 should be the max 
  min_vel_x: 0.0 #defaul 0.0; for real-life 0.1 should be the max. Higher than 0.1 might get the robot 'stuck' in a slow translational movement along a corridor.
  trans_stopped_vel: 0.1 #seems undocumented, so is maybe unused, I based it on this: see https://github.com/turtlebot/turtlebot_apps/blob/indigo/turtlebot_navigation/param/dwa_local_planner_params.yaml
  
  min_vel_y: 0.0
  max_vel_y: 0.0
  max_rot_vel: 5.0
  min_rot_vel: 0.4
  rot_stopped_vel: 0.4 #seems undocumented, so is maybe unused, I based it on this: see https://github.com/turtlebot/turtlebot_apps/blob/indigo/turtlebot_navigation/param/dwa_local_planner_params.yaml
  
  acc_lim_x: 0.5
  acc_lim_y: 0.0
  acc_lim_th: 1.0

  yaw_goal_tolerance: 0.3 #0.3 seems good, maybe try 99 to make yaw of no importance at all?
  xy_goal_tolerance: 0.15
  
  latch_xy_goal_tolerance: true #If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so. 
 
  sim_time: 1.0  #default 1.7, tbi1 (turtlebot indigo)
  vx_samples: 6  #default 3, tbi6
  vy_samples: 1  #default 10, tbi1
  vtheta_samples: 20 #default 20, tbi20

  #The cost function used to score each trajectory is in the following form: 
  #cost =  path_distance_bias * (distance to path from the endpoint of the trajectory in meters)  + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in meters)  + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

  # Some notes on path_distance_bias and goal_distance_bias. 
  #  - Setting them too low: higher seems to make sure that robot does not get stuck and gives up (e.g. in a doorway stuck because too close too obstacles or so). 
  #  - Setting them too high: it can sometimes get 'stuck' in a translational motion: it cannot succeed to make a turn or so. This can happen in a corridor or along a wall it seems... E.g.: if you send it somewhere north of the corridor it can sometimes keep on going south as if it cannot make the turn in the corridor... Running into an obstacles will usually automatically 'reset' the robot from this erratic behavior. This 'stuck' behaviour might also be caused by a non-zero min_vel_x
  # Please note that the above notes are presumptions: I am not sure yet...
  path_distance_bias: 32.0 #default:32, strands: 5.0
  goal_distance_bias: 24.0 #default:24, strands: 9.0

  occdist_scale: 0.01 #default:0.01
  oscillation_reset_dist: 0.05
  prune_plan: true

  holonomic_robot: false

